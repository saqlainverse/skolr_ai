const meta_token = document.head.querySelector('meta[name="csrf-token"]');
let token = "";
meta_token && (token = meta_token.content);
let single_choice = "",
    section = 0,
    base_url = $(".base_url").val(),
    modal_id = "";
function instructorValidate(e) {
    let t = $(e).closest(".default-tab-list"),
        a = t.find(".nav-link.active"),
        r = a.data("bs-target");
    a.removeClass("active"),
        $(r).removeClass("active"),
        $(r).removeClass("show"),
        t.find(".nav-link:first").addClass("active"),
        t.find(".tab-pane:first").addClass("active"),
        t.find(".tab-pane:first").addClass("show");
}
function resetForm() {
    modal_id.find("form").trigger("reset");
}
function copyText(e) {
    let t = $(".text_copied").val(),
        a = $(".text_copied_fail").val();
    navigator.clipboard
        .writeText(e)
        .then(() => {
            toastr.success(t);
        })
        .catch((e) => {
            toastr.error(a + ": ", e);
        });
}
function showMore() {
    $(".details").click(function (e) {
        e.preventDefault(),
            $(this).prev("p").toggleClass("toggle"),
            "Details" === $(this).text()
                ? $(this).text("See less")
                : $(this).text("Details");
    }),
        $(".details").each(function () {
            50.38 >= $(this).prev("p").height() && $(this).remove();
        });
}
function mainSidebar() {
    let e = $(".sidebar-toggler"),
        t = $("body");
    e.on("click", function () {
        document.body.classList.toggle("sidebar-collapse");
    }),
        $(window).on("resize", function () {
            let e = $(this).width();
            e >= 576 && e <= 991
                ? t.addClass("sidebar-collapse")
                : t.removeClass("sidebar-collapse");
        });
}
function settingTools() {
    let e = $(".settings-tools-nav ul");
    e.find("li a").each(function () {
        $(this).next().length > 0 &&
            ($(this).append('<i class="dropdown-icon las la-angle-down"></i>'),
            $(this).addClass("has-dropdown"));
    }),
        e.find(".has-dropdown").on("click", function (e) {
            e.preventDefault(),
                $(this)
                    .parent()
                    .parent("li")
                    .children("ul")
                    .stop(!0, !0)
                    .slideToggle(350),
                $(this).toggleClass("sub-menu-opened");
        }),
        $(".settings-tools-nav").on("click", function (e) {
            e.stopPropagation();
        });
}
function sideNav() {
    let e = $(".email-tamplate-sidenav ul");
    e.find("li a").each(function () {
        $(this).next().length > 0 &&
            ($(this).append('<i class="arrow-icon las la-angle-down"></i>'),
            $(this).addClass("has-dropdown"));
    }),
        e.find(".has-dropdown").on("click", function (e) {
            e.preventDefault(),
                $(this)
                    .parent()
                    .parent("li")
                    .children("ul")
                    .stop(!0, !0)
                    .slideToggle(350),
                $(this).toggleClass("sub-menu-opened");
        }),
        $(".settings-tools-nav").on("click", function (e) {
            e.stopPropagation();
        });
}
function selectionFields() {
    $(".without_search").select2({
        minimumResultsForSearch: 1 / 0,
        placeholder: $(this).attr("placeholder"),
    }),
        $(".with_search, .multiple-select-1").select2({
            placeholder: $(this).attr("placeholder"),
        });
}
function reInitializeSelect(e, t) {
    var a = e.select2();
    a.empty(),
        modal_id
            ? a.select2({ data: t, dropdownParent: modal_id })
            : a.select2({ data: t }),
        a.trigger("change");
}
function defaultEditor() {
    $("#product-update-editor").summernote({
        tabsize: 2,
        height: 350,
        fontNames: ["sans-serif", "Arial"],
        fontsize: "16",
        disableResize: !0,
        disableResizeEditor: !0,
        resize: !1,
        toolbar: [
            ["font", ["bold", "underline"]],
            ["fontname", ["fontname"]],
            ["fontsize", ["fontsize"]],
            ["color", ["color"]],
            ["para", ["ul", "ol", "paragraph"]],
            ["table", ["table"]],
            ["insert", ["link", "picture", "video"]],
            ["view", ["fullscreen", "help"]],
        ],
    }),
        $(".summernote").summernote({
            tabsize: 2,
            height: 350,
            fontNames: ["sans-serif", "Arial"],
            fontsize: "16",
            disableResize: !0,
            disableResizeEditor: !0,
            resize: !1,
            toolbar: [
                ["font", ["bold", "underline"]],
                ["fontname", ["fontname"]],
                ["fontsize", ["fontsize"]],
                ["color", ["color"]],
                ["para", ["ul", "ol", "paragraph"]],
                ["table", ["table"]],
                ["insert", ["link", "picture", "video"]],
                ["view", ["fullscreen", "help"]],
            ],
        });
}
function passwordprotect() {
    $(document).on("click", ".toggle-password", function () {
        $(this).prev("input").attr("id");
        var e = $(this).closest(".user-password").find(".passField"),
            t = $(this);
        "password" === e.attr("type")
            ? (e.attr("type", "text"),
              t.html("<i class='lar la-eye-slash'></i>"))
            : (e.attr("type", "password"),
              t.html("<i class='lar la-eye'></i>"));
    });
}
function searchInstructor(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route")
                ? e.data("route")
                : base_url + "/ajax/instructors",
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchUser(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route"),
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchBlog(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route"),
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchBook(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route"),
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchCategory(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route")
                ? e.data("route")
                : base_url + "/ajax/categories",
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchInstructor(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route")
                ? e.data("route")
                : base_url + "/ajax/instructors",
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchOrganization(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route")
                ? e.data("route")
                : base_url + "/ajax/organizations",
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchCourse(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route") ? e.data("route") : base_url + "/ajax/courses",
            dataType: "json",
            data: function (t) {
                return {
                    q: t.term,
                    is_featured: e.data("is_featured") ? 1 : 0,
                };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchSubjects(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route")
                ? e.data("route")
                : base_url + "/ajax/subjects",
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function searchLessons(e) {
    e.select2({
        placeholder: e.attr("placeholder"),
        ajax: {
            url: e.data("route") ? e.data("route") : base_url + "/ajax/lessons",
            dataType: "json",
            data: function (e) {
                return { q: e.term };
            },
            processResults: function (e) {
                return { results: e };
            },
            cache: !0,
        },
        minimumInputLength: 2,
    });
}
function formatState(e) {
    return e.id
        ? $(
              '<span><img src="' +
                  e.image +
                  '.png" class="img-flag" /> ' +
                  e.image +
                  "</span>"
          )
        : e.text;
}
function AnimateProgress(e) {
    (e.className = "animate-progress"),
        e.setAttribute(
            "style",
            `--animate-progress:${e.getAttribute("data-progress")}%;`
        );
}
!(function (e) {
    "use strict";
    e(document).ready(function () {
        e(document).on("click", ".copy_text", function () {
            copyText(e(this).data("text"));
        }),
            e(document).on("change", "#lang", function () {
                e(this).closest("form").submit();
            }),
            e(document).on("click", ".status-change", function (t) {
                let a = e(this);
                var r = a.val().split("/");
                let s = a.data("field_for");
                var o = base_url + "/admin/" + r[0];
                if ("maintenance_mode" == s) {
                    if (a.is(":checked"))
                        return (
                            t.preventDefault(),
                            e("#maintenance_mode").modal("show")
                        );
                    e(".warning_text").addClass("d-none");
                }
                "image_optimization" == s &&
                    (a.is(":checked")
                        ? e(".optimization_div").removeClass("d-none")
                        : e(".optimization_div").addClass("d-none"));
                var n = a.data("id");
                if (e(this).is(":checked")) var i = 1;
                else var i = 0;
                let l = { id: n, status: i, data: { name: r[1], value: i } };
                console.log(o),
                    e.ajax({
                        headers: { "X-CSRF-TOKEN": token },
                        url: o,
                        method: "POST",
                        data: l,
                        success: function (e) {
                            toastr.clear(),
                                200 == e.status || "success" == e.status
                                    ? e.reload
                                        ? (toastr.success(e.message),
                                          location.reload())
                                        : toastr.success(e.message)
                                    : (a.prop("checked", !i),
                                      toastr.error(e.message));
                        },
                        error: function (e) {
                            a.prop("checked", !i), toastr.error(e.message);
                        },
                    });
            }),
            e(document).on("click", ".pubished_status", function (t) {
                let a = e(this);
                var r = a.val().split("/");
                let s = a.data("field_for");
                var o = base_url + "/admin/" + r[0];
                if ("maintenance_mode" == s) {
                    if (a.is(":checked"))
                        return (
                            t.preventDefault(),
                            e("#maintenance_mode").modal("show")
                        );
                    e(".warning_text").addClass("d-none");
                }
                "image_optimization" == s &&
                    (a.is(":checked")
                        ? e(".optimization_div").removeClass("d-none")
                        : e(".optimization_div").addClass("d-none"));
                var n = a.data("id");
                if (e(this).is(":checked")) var i = 1;
                else var i = 0;
                let l = { id: n, status: i, data: { name: r[1], value: i } };
                console.log(o),
                    e.ajax({
                        headers: { "X-CSRF-TOKEN": token },
                        url: o,
                        method: "POST",
                        data: l,
                        success: function (t) {
                            toastr.clear(),
                                e("#dataTableBuilder")
                                    .DataTable()
                                    .ajax.reload(),
                                200 == t.status || "success" == t.status
                                    ? t.reload
                                        ? (toastr.success(t.message),
                                          location.reload())
                                        : toastr.success(t.message)
                                    : (a.prop("checked", !i),
                                      toastr.error(t.message));
                        },
                        error: function (e) {
                            a.prop("checked", !i), toastr.error(e.message);
                        },
                    });
            }),
            e(document).on("click", ".instructor-status-change", function (t) {
                let a = e(this);
                var r = a.val().split("/");
                let s = a.data("field_for");
                var o = base_url + "/organization/" + r[0];
                if ("maintenance_mode" == s) {
                    if (a.is(":checked"))
                        return (
                            t.preventDefault(),
                            e("#maintenance_mode").modal("show")
                        );
                    e(".warning_text").addClass("d-none");
                }
                "image_optimization" == s &&
                    (a.is(":checked")
                        ? e(".optimization_div").removeClass("d-none")
                        : e(".optimization_div").addClass("d-none"));
                var n = a.data("id");
                if (e(this).is(":checked")) var i = 1;
                else var i = 0;
                let l = { id: n, status: i, data: { name: r[1], value: i } };
                e.ajax({
                    headers: { "X-CSRF-TOKEN": token },
                    url: o,
                    method: "POST",
                    data: l,
                    success: function (e) {
                        toastr.clear(),
                            200 == e.status || "success" == e.status
                                ? e.reload
                                    ? (toastr.success(e.message),
                                      location.reload())
                                    : toastr.success(e.message)
                                : (a.prop("checked", !i),
                                  toastr.error(e.message));
                    },
                    error: function (e) {
                        a.prop("checked", !i), toastr.error(e.message);
                    },
                });
            });
        let t = document.getElementById("homepageContent");
        t && new Sortable(t, { animation: 150 });
        let a = document.querySelectorAll('[data-bs-toggle="popover"]');
        [...a].map((e) => new bootstrap.Popover(e)),
            e("body").on("click", function (t) {
                "popover" !== e(t.target).data("toggle") &&
                    0 === e(t.target).parents(".popover.in").length &&
                    e('[data-bs-toggle="popover"]').popover("hide");
            });
        var r = e(".side-nav ul .active");
        if (r.length > 0) {
            var s = e(".side-nav").height(),
                o = r.position().top;
            e(".side-nav").scrollTop(o - s / 2);
        }
        e(document).on("click", ".builder", function () {
            section++;
            let t = e(this).data("target_id"),
                a = e(this).data("name"),
                r = e(this).data("var_type"),
                s = e(".modal")
                    .find("#" + t)
                    .clone()
                    .appendTo("#homepageContent"),
                o = t + "_section_" + section,
                n = s.find("button");
            n.length && n.attr("data-bs-target", "#" + o),
                s.find(".accordion-collapse").attr("id", o),
                s.find("*").each(function () {
                    if (e(this).attr("name")) {
                        if (e(this).is("input") || e(this).is("textarea")) {
                            let t = e(this).data("type");
                            e(this).prop(
                                "name",
                                "builder[" + a + "_" + section + "][" + t + "]"
                            );
                        } else
                            e(this).prop(
                                "name",
                                "builder[" +
                                    a +
                                    "_" +
                                    section +
                                    "]" +
                                    ("array" == r ? "[ids][]" : "")
                            );
                        return !0;
                    }
                }),
                window.scrollTo({
                    behavior: "smooth",
                    top: document.body.scrollHeight,
                });
        }),
            e(document).on("click", ".accordion-header", function () {
                let t = e(this).attr("id");
                e(this)
                    .find(".form-select")
                    .hasClass("select2-hidden-accessible") &&
                    e(this).find(".form-select").select2("destroy"),
                    "instructor" == t
                        ? searchInstructor(
                              e(this)
                                  .closest(".accordion-item")
                                  .find(".form-select")
                          )
                        : "featuredCourse" == t || "singleCourse" == t
                        ? searchCourse(
                              e(this)
                                  .closest(".accordion-item")
                                  .find(".form-select")
                          )
                        : "subjects" == t
                        ? searchSubjects(
                              e(this)
                                  .closest(".accordion-item")
                                  .find(".form-select")
                          )
                        : "mentor" == t &&
                          searchLessons(
                              e(this)
                                  .closest(".accordion-item")
                                  .find(".form-select")
                          );
            }),
            e(document).on(
                "click",
                ".homepage-content .delete-icon",
                function () {
                    e(this).closest(".accordion-item").remove();
                }
            ),
            e(document).on("change", ".file_picker", function (t) {
                let a = t.target.files[0],
                    r = e(this).closest(".input_file_div");
                r.find(".file-upload-text").text(a.name),
                    r.find(".selected-img").attr("src", URL.createObjectURL(a));
            }),
            e(".modal")
                .on("shown.bs.modal", function () {
                    let t = e(this).attr("id");
                    "addMedia" != t &&
                        ((modal_id = e("#" + t))
                            .find(".with_search")
                            .select2({
                                placeholder: e(this).attr("placeholder"),
                                dropdownParent: modal_id,
                                dropdownParent: e(this).find(".modal-content"),
                            }),
                        modal_id
                            .find(".without_search")
                            .select2({
                                minimumResultsForSearch: 1 / 0,
                                placeholder: e(this).attr("placeholder"),
                                dropdownParent: modal_id,
                                dropdownParent: e(this).find(".modal-content"),
                            }));
                })
                .on("hidden.bs.modal", function () {
                    modal_id.find("p.error").text("");
                }),
            e(document).on("submit", ".form", function (t) {
                t.preventDefault();
                let a = this;
                e(a).find(".loading_button").removeClass("d-none"),
                    e(a).find("p.error").text(""),
                    e(a).find(":submit").addClass("d-none");
                let r = e(a).attr("action"),
                    s = e(a).attr("method"),
                    o = new FormData(a),
                    n = e(a).find(".is_modal").val();
                e.ajax({
                    url: r,
                    method: s,
                    data: o,
                    contentType: !1,
                    processData: !1,
                    success: function (t) {
                        window.scrollTo({ behavior: "smooth", top: 0 }),
                            t.success
                                ? modal_id && !n
                                    ? (e(a)
                                          .find(".loading_button")
                                          .addClass("d-none"),
                                      e(a)
                                          .find(":submit")
                                          .removeClass("d-none"),
                                      toastr.success(t.success),
                                      modal_id.modal("hide"),
                                      e(a).trigger("reset"),
                                      modal_id
                                          .find(".create_sub_title")
                                          .removeClass("d-none"),
                                      modal_id
                                          .find(".edit_sub_title")
                                          .addClass("d-none"),
                                      e(".dataTable").DataTable().ajax.reload())
                                    : t.route
                                    ? (window.location.href = t.route)
                                    : location.reload()
                                : (e(a)
                                      .find(".loading_button")
                                      .addClass("d-none"),
                                  e(a).find(":submit").removeClass("d-none"),
                                  toastr.error(t.error));
                    },
                    error: function (t) {
                        window.scrollTo({ behavior: "smooth", top: 0 }),
                            e(a).find(".loading_button").addClass("d-none"),
                            e(a).find(":submit").removeClass("d-none"),
                            422 == t.status
                                ? ("tab_form" == o.get("type") &&
                                      instructorValidate(a),
                                  e.each(
                                      t.responseJSON.errors,
                                      function (t, a) {
                                          e("." + t + "_error").text(a[0]);
                                      }
                                  ))
                                : toastr.error(t.responseJSON.error);
                    },
                });
            }),
            e(document).on("change", ".thumb_picker", function (t) {
                e(this).attr("id");
                let a = t.target.files[0];
                e(this)
                    .siblings(".file-upload-text")
                    .find(".file_name")
                    .text(a.name);
            }),
            e(document).on("click", ".edit_modal", function () {
                let t = e(this).attr("data-modal");
                (modal_id = e("#" + t)).modal("show"),
                    modal_id.find(".create_sub_title").addClass("d-none"),
                    modal_id.find(".edit_sub_title").removeClass("d-none");
                let a = e(this).attr("data-fetch_url"),
                    r = e(this).attr("data-route");
                modal_id.find("form").attr("action", r),
                    e.ajax({
                        type: "GET",
                        url: a,
                        success: function (e) {
                            if ((console.log(e), e.html))
                                modal_id.find(".form_div").html(e.html),
                                    defaultEditor(),
                                    selectionFields();
                            else {
                                let t = Object.keys(e);
                                for (let a = 0; a < t.length; a++) {
                                    let r = modal_id.find(
                                        'form [name="' + t[a] + '"]'
                                    );
                                    "checkbox" == r.attr("type")
                                        ? (console.log(e[t[a]]),
                                          r.prop("checked", e[t[a]]))
                                        : r.val(e[t[a]]);
                                }
                            }
                        },
                    });
            }),
            e(document).on("click", ".tab_switcher", function () {
                let t = e(this)
                        .closest(".default-tab-list")
                        .find(".nav-link.active"),
                    a = t.data("bs-target"),
                    r = t.closest("li").siblings(":first").find(".nav-link"),
                    s = r.data("bs-target");
                t.removeClass("active"),
                    e(a).removeClass("active"),
                    e(a).removeClass("show"),
                    r.addClass("active"),
                    e(s).addClass("active"),
                    e(s).addClass("show");
            }),
            e(document).on("click", ".get_code", function () {
                let t = e(this).attr("data-length"),
                    a = e(this).closest(".input-group").find("input");
                for (
                    var r = "",
                        s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                        o = 0;
                    o < t;
                    o++
                )
                    r += s.charAt(Math.floor(Math.random() * s.length));
                a.val(r);
            }),
            e(document).on("change", ".sandbox_mode", function () {
                let t = e(this).attr("id"),
                    a = e(this).prop("checked"),
                    r = e(this)
                        .closest(".sandbox_mode_div")
                        .find('input[name="' + t + '"]');
                a ? r.val(1) : r.val(0);
            }),
            e(document).on("keyup", ".cross-origin", function (t) {
                var a = e(this).val();
                e(this).closest("div").find(".cross_origin_input").val(btoa(a));
            }),
            e(document).on("change", "#country", function () {
                var t = e(this).val(),
                    a = e(this).attr("data-url");
                e.ajax({
                    type: "GET",
                    url: a,
                    data: { country_id: t },
                    success: function (t) {
                        if (t.error) return toastr.error(t.error);
                        reInitializeSelect(e("#state"), t);
                    },
                    error: function (e) {
                        toastr.error(e.responseJSON.error);
                    },
                });
            }),
            e(document).on("change", "#state", function () {
                var t = e(this).val(),
                    a = e(this).attr("data-url");
                e.ajax({
                    type: "GET",
                    url: a,
                    data: { state_id: t },
                    success: function (t) {
                        if (t.error) return toastr.error(t.error);
                        reInitializeSelect(e("#city"), t);
                    },
                    error: function (e) {
                        toastr.error(e.responseJSON.error);
                    },
                });
            }),
            e(document).on("change", "#ins_by_org", function () {
                var t = e(this).val(),
                    a = e(this).attr("data-url");
                e.ajax({
                    type: "GET",
                    url: a,
                    data: { organization_id: t },
                    success: function (t) {
                        if (t.error) return toastr.error(t.error);
                        reInitializeSelect(e("#instructor_ids"), t);
                    },
                    error: function (e) {
                        toastr.error(e.responseJSON.error);
                    },
                });
            }),
            e(document).on("change", "#section_id", function () {
                var t = e(this).val(),
                    a = e(this).attr("data-url");
                e.ajax({
                    type: "GET",
                    url: a,
                    data: { section_id: t },
                    success: function (t) {
                        if (t.error) return toastr.error(t.error);
                        reInitializeSelect(e("#lesson_id"), t);
                    },
                    error: function (e) {
                        toastr.error(e.responseJSON.error);
                    },
                });
            }),
            e(document).on("click", "#download_update", function () {
                let t = e(this);
                var a = e(this).attr("data-url");
                e(".alert_div")
                    .removeClass("alert-danger")
                    .removeClass("alert-success")
                    .addClass("d-none"),
                    e(".overlayText").removeClass("d-none"),
                    t.addClass("d-none"),
                    e("#preloader").removeClass("d-none"),
                    setTimeout(function () {
                        e.ajax({
                            method: "POST",
                            data: { _token: token },
                            url: a,
                            success: function (a) {
                                e(".alert_div")
                                    .addClass("alert-" + a.class)
                                    .removeClass("d-none"),
                                    e(".alert_div strong").text(a.type),
                                    e(".alert_div span:first").text(a.message),
                                    e(".overlayText").addClass("d-none"),
                                    t.removeClass("d-none"),
                                    e("#preloader").addClass("d-none"),
                                    "success" == a.class &&
                                        setTimeout(() => {
                                            window.location.reload();
                                        }, 1e3);
                            },
                            error: function (a) {
                                e(".alert_div")
                                    .addClass("alert-danger")
                                    .removeClass("d-none"),
                                    e(".alert_div strong").text("Error !"),
                                    e(".alert_div span:first").text(
                                        a.statusText
                                    ),
                                    e(".overlayText").addClass("d-none"),
                                    t.removeClass("d-none"),
                                    e("#preloader").addClass("d-none");
                            },
                        });
                    }, 500);
            }),
            e(document).on("change", ".organization_balance", function () {
                var t = e(this).val(),
                    a = e(this).attr("data-url");
                e.ajax({
                    type: "post",
                    url: a,
                    data: { organization: t, _token: token },
                    success: function (t) {
                        if (t.error) return toastr.error(t.error);
                        e(".available_balance").empty().html(t.amount),
                            console.log(t);
                    },
                    error: function (e) {
                        toastr.error(e.responseJSON.error);
                    },
                });
            }),
            e("#dateRangePicker").on("apply.daterangepicker", function (t, a) {
                e(this).val(
                    a.startDate.format("MM/DD/YYYY") +
                        " - " +
                        a.endDate.format("MM/DD/YYYY")
                );
            });
    }),
        passwordprotect(),
        mainSidebar(),
        settingTools(),
        sideNav(),
        selectionFields(),
        defaultEditor(),
        showMore(),
        e(".lang").on("change", function () {
            e("#lang").submit();
        });
})(jQuery),
    (window.onload = function () {
        let e = document.querySelectorAll(".line-progress").length,
            t = document.querySelectorAll(
                ".line-progress [data-progress]"
            ).length,
            a = document.querySelectorAll(".line-progress [data-progress]");
        e > 0 && t > 0 && a.forEach((e) => AnimateProgress(e));
    });
var instructorChart2 = document.getElementById("instructorStatistics2");
instructorChart2 &&
    new Chart(instructorChart2, {
        type: "line",
        data: {
            labels: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saterday",
            ],
            datasets: [
                {
                    label: "Regular Sell",
                    data: [5, 10, 2, 13, 7, 14, 2],
                    fill: !1,
                    borderColor: "#3F52E3",
                    backgroundColor: "#3F52E3",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                    tension: 0.4,
                },
                {
                    label: "Offer Sell",
                    data: [24, 44, 12, 40, 37, 58, 38],
                    fill: !1,
                    borderColor: "#24D6A5",
                    backgroundColor: "#24D6A5",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                    tension: 0.4,
                },
            ],
        },
        options: {
            responsive: !0,
            maintainAspectRatio: !1,
            scales: {
                x: {
                    border: { display: !1 },
                    grid: { drawBorder: !1, borderDash: [0, 0], lineWidth: 0 },
                },
                y: { grid: { drawBorder: !1, borderDash: [5, 5] } },
            },
            plugins: {
                legend: {
                    align: "center",
                    position: "bottom",
                    labels: {
                        boxWidth: 7,
                        boxHeight: 7,
                        usePointStyle: !0,
                        pointStyle: "circle",
                    },
                },
            },
        },
    });
var instructorChart3 = document.getElementById("instructorStatistics3");
if (instructorChart3) {
    var e = instructorChart3.getContext("2d"),
        t = e.createLinearGradient(0, 0, 0, 900);
    t.addColorStop(0.1, "#3F52E390"),
        t.addColorStop(0.4, "#ffffff10"),
        new Chart(instructorChart3, {
            type: "line",
            data: {
                labels: [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saterday",
                ],
                datasets: [
                    {
                        label: "Earning",
                        data: [100, 200, 150, 220, 250, 150, 300],
                        fill: !0,
                        borderColor: "#3F52E3",
                        backgroundColor: t,
                        borderWidth: 2,
                    },
                ],
            },
            options: {
                responsive: !0,
                maintainAspectRatio: !1,
                scales: {
                    x: {
                        border: { display: !1 },
                        grid: {
                            drawBorder: !1,
                            borderDash: [0, 0],
                            lineWidth: 0,
                        },
                    },
                    y: { grid: { drawBorder: !1, borderDash: [5, 5] } },
                },
                plugins: { legend: { display: !1 } },
            },
        });
}
var instructorChart4 = document.getElementById("instructorStatistics4");
if (instructorChart4) {
    var e = instructorChart4.getContext("2d"),
        t = e.createLinearGradient(0, 0, 0, 900);
    t.addColorStop(0.1, "#24D6AC60"),
        t.addColorStop(0.4, "#ffffff30"),
        new Chart(instructorChart4, {
            type: "line",
            data: {
                labels: [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saterday",
                ],
                datasets: [
                    {
                        label: "Payment",
                        data: [100, 200, 150, 220, 250, 150, 300],
                        fill: !0,
                        borderColor: "#24D6AC",
                        backgroundColor: t,
                        borderWidth: 2,
                    },
                ],
            },
            options: {
                responsive: !0,
                maintainAspectRatio: !1,
                scales: {
                    x: {
                        border: { display: !1 },
                        grid: {
                            drawBorder: !1,
                            borderDash: [0, 0],
                            lineWidth: 0,
                        },
                    },
                    y: { grid: { drawBorder: !1, borderDash: [5, 5] } },
                },
                plugins: { legend: { display: !1 } },
            },
        });
}
var courseStatisticsItem = document.getElementById("courseStatisticChart");
courseStatisticsItem &&
    new Chart(courseStatisticsItem, {
        type: "line",
        data: {
            labels: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
            ],
            datasets: [
                {
                    label: "Total Enrolment",
                    data: [65, 58, 41, 58, 74, 57, 63, 43, 62, 65, 100],
                    fill: !1,
                    borderColor: "#3F52E3",
                    backgroundColor: "#3F52E3",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                },
                {
                    label: "Total Orders",
                    data: [42, 58, 21, 68, 34, 77, 93, 50, 82, 35, 90],
                    fill: !1,
                    borderColor: "#24D6A5",
                    backgroundColor: "#24D6A5",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                },
                {
                    label: "Total Profit",
                    data: [20, 28, 71, 38, 54, 90, 71, 31, 34, 25, 79],
                    fill: !1,
                    borderColor: "#FF5630",
                    backgroundColor: "#FF5630",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                },
            ],
        },
        options: {
            responsive: !0,
            maintainAspectRatio: !1,
            scales: {
                x: {
                    stacked: !0,
                    border: { display: !1 },
                    grid: { drawBorder: !1, borderDash: [0, 0], lineWidth: 0 },
                },
                y: {
                    stacked: !0,
                    grid: { drawBorder: !1, borderDash: [5, 5] },
                },
            },
            plugins: {
                legend: {
                    align: "start",
                    position: "right",
                    labels: {
                        boxWidth: 7,
                        boxHeight: 7,
                        usePointStyle: !0,
                        pointStyle: "circle",
                    },
                },
            },
        },
    });
var statisticsItem2 = document.getElementById("statisticsBarChart2");
statisticsItem2 &&
    new Chart(statisticsItem2, {
        type: "bar",
        data: {
            labels: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
            ],
            datasets: [
                {
                    label: "New Students",
                    data: [65, 58, 41, 58, 74, 57, 63, 43, 62, 65, 100],
                    fill: !1,
                    borderColor: "#3F52E3",
                    backgroundColor: "#3F52E3",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                },
                {
                    label: "New Enrolled",
                    data: [42, 58, 21, 68, 34, 77, 93, 50, 82, 35, 90],
                    fill: !1,
                    borderColor: "#24D6A5",
                    backgroundColor: "#24D6A5",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                },
                {
                    label: "Total Sale",
                    data: [20, 28, 71, 38, 54, 90, 71, 31, 34, 25, 79],
                    fill: !1,
                    borderColor: "#FF5630",
                    backgroundColor: "#FF5630",
                    borderWidth: 1,
                    barThickness: 5,
                    borderRadius: 5,
                },
            ],
        },
        options: {
            responsive: !0,
            maintainAspectRatio: !1,
            scales: {
                x: {
                    stacked: !0,
                    border: { display: !1 },
                    grid: { drawBorder: !1, borderDash: [0, 0], lineWidth: 0 },
                },
                y: {
                    stacked: !0,
                    grid: { drawBorder: !1, borderDash: [5, 5] },
                },
            },
            plugins: {
                legend: {
                    align: "start",
                    position: "right",
                    labels: {
                        boxWidth: 7,
                        boxHeight: 7,
                        usePointStyle: !0,
                        pointStyle: "circle",
                    },
                },
            },
        },
    });
const chartItem7 = document.getElementById("statisticsChart7");
if (chartItem7) {
    var e = chartItem7.getContext("2d"),
        t = e.createLinearGradient(0, 0, 0, 200);
    t.addColorStop(0.1, "#ff563050"),
        t.addColorStop(0.4, "#ffffff30"),
        new Chart(chartItem7, {
            type: "line",
            data: {
                labels: [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Nov",
                    "Des",
                ],
                datasets: [
                    {
                        label: "Free Course",
                        backgroundColor: t,
                        borderColor: "#ff5630",
                        data: [1, 37, 26, 40, 34, 59, 42, 60, 78, 80, 100],
                        fill: !0,
                    },
                ],
            },
            options: {
                plugins: { legend: { display: !1 } },
                maintainAspectRatio: !1,
                scales: { x: { display: !1 }, y: { display: !1 } },
                elements: {
                    line: { borderWidth: 2, tension: 0.4 },
                    point: { radius: 0, hitRadius: 10, hoverRadius: 4 },
                },
            },
        });
}
